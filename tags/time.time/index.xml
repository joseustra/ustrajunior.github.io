<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>time.Time on Let&#39;s code</title>
    <link>https://ustrajunior.com/tags/time.time/</link>
    <description>Recent content in time.Time on Let&#39;s code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Nov 2016 19:40:18 +0000</lastBuildDate>
    
	<atom:link href="https://ustrajunior.com/tags/time.time/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>json: unmarshal custom date formats</title>
      <link>https://ustrajunior.com/blog/json-unmarshal-custom-date-formats/</link>
      <pubDate>Thu, 03 Nov 2016 19:40:18 +0000</pubDate>
      
      <guid>https://ustrajunior.com/blog/json-unmarshal-custom-date-formats/</guid>
      <description>When we are building a JSON API, many times we have to deal with dates that we can&amp;rsquo;t have control of the layout.
Let&amp;rsquo;s see a common example using a format that Go knows by default.
type Checkin struct { Timestamp time.Time `json:&amp;quot;timestamp&amp;quot;` User string `json:&amp;quot;user&amp;quot;` } func main() { j := `{&amp;quot;timestamp&amp;quot;:&amp;quot;2016-11-02T08:18:20Z&amp;quot;, &amp;quot;user&amp;quot;:&amp;quot;John Doe&amp;quot;}` var c Checkin // error handling omitted for simplicity (don&#39;t do this). json.Unmarshal([]byte(j), &amp;amp;c) fmt.Println(c) }  Run on Playground.</description>
    </item>
    
  </channel>
</rss>