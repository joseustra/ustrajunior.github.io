<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Let&#39;s code</title>
    <link>https://ustrajunior.com/tags/golang/</link>
    <description>Recent content in golang on Let&#39;s code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Sep 2018 10:20:33 +0000</lastBuildDate>
    
	<atom:link href="https://ustrajunior.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Starting a New Ambitious Project</title>
      <link>https://ustrajunior.com/blog/starting-a-new-ambitious-project/</link>
      <pubDate>Wed, 12 Sep 2018 10:20:33 +0000</pubDate>
      
      <guid>https://ustrajunior.com/blog/starting-a-new-ambitious-project/</guid>
      <description>For a very short time, I used the Spacemacs emacs distribution. It&amp;rsquo;s very nice, but I ended up backing to vim and eventually, I moved to VS Code. Code editors away, when I was using Spacemacs, I found the Magit git client.
 Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs.</description>
    </item>
    
    <item>
      <title>json: unmarshal custom date formats</title>
      <link>https://ustrajunior.com/blog/json-unmarshal-custom-date-formats/</link>
      <pubDate>Thu, 03 Nov 2016 19:40:18 +0000</pubDate>
      
      <guid>https://ustrajunior.com/blog/json-unmarshal-custom-date-formats/</guid>
      <description>When we are building a JSON API, many times we have to deal with dates that we can&amp;rsquo;t have control of the layout.
Let&amp;rsquo;s see a common example using a format that Go knows by default.
type Checkin struct { Timestamp time.Time `json:&amp;quot;timestamp&amp;quot;` User string `json:&amp;quot;user&amp;quot;` } func main() { j := `{&amp;quot;timestamp&amp;quot;:&amp;quot;2016-11-02T08:18:20Z&amp;quot;, &amp;quot;user&amp;quot;:&amp;quot;John Doe&amp;quot;}` var c Checkin // error handling omitted for simplicity (don&#39;t do this). json.Unmarshal([]byte(j), &amp;amp;c) fmt.Println(c) }  Run on Playground.</description>
    </item>
    
    <item>
      <title>Variadic functions in Go</title>
      <link>https://ustrajunior.com/blog/variadic-functions-in-go/</link>
      <pubDate>Fri, 21 Oct 2016 18:55:08 +0000</pubDate>
      
      <guid>https://ustrajunior.com/blog/variadic-functions-in-go/</guid>
      <description>Let&amp;rsquo;s create a function that we can pass 3 numbers as arguments and them it returns the average of this numbers.
func average(num1, num2, num3 float64) float64 { avg := (num1 + num2 + num3) / 3 return avg }  and then, you call it like this
func main() { fmt.Println(average(2, 4, 6)) }  Le&amp;rsquo;ts run to see if works
$ go run average.go 4  It works. Super easy, but not so useful.</description>
    </item>
    
  </channel>
</rss>